openapi: 3.0.0
info:
  title: Exchange Platform API
  version: 0.0.2
servers:
  - url: http://localhost:{port}/exchangeplatform/api/v1
    variables:
      port:
        enum:
          - '1717'
        default: '1717'


paths:
  /students:
    get:
      summary: Returns a list of students
      operationId: getStudents
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: false
        - in: query
          name: studentId
          schema:
            type: integer
            format: int64
          required: false
      responses:
        "200":
          description: List of Students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Student"

  /students/{studentId}:
    get:
      summary: Returns detailed information about the student specified by the Id.
      operationId: "getStudentById"
      parameters:
        - in: path
          name: studentId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the student to get
      responses:
        '200':    # status code
          description: A single student
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Student"


  /timeslots:
    get:
      summary: Returns a list of timeslots.
      operationId: "getAllTimeslots"
      responses:
        '200':    # status code
          description: A JSON array of timeslots
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: "#/components/schemas/Timeslot"

  /timeslots/{timeslotId}/possibleTrades:
    get:
      summary: Get possible trades for timeslot.
      operationId: "getPossibleTradesForTimeslotById"
      parameters:
        - in: path
          name: timeslotId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the timeslot
      responses:
        '200':    # status code
          description: A single timeslot
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/PossibleTradesResponse"

  /timetables/{studentId}:
    get:
      summary: Get personalized Timetable of student.
      operationId: "getTimetableForStudent"
      parameters:
        - in: path
          name: studentId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the student
      responses:
        '200':    # status code
          description: a timetable
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Timetable"
              example:
                id: 12
                end: "2017-07-21"
                start: "2017-08-19"
                timeslots:
                  - id: "17"
                    room: 
                      id: 42
                      roomNumber: "13"
                      location: "Ude"
                    day: "monday"
                    time_start:
                      hour: 8
                      minute: 15
                    time_end:
                      hour: 9
                      minute: 45
                    lecturer:
                      name: "Willi Wonka"
                      mail: "WilliWonka@schokoladenfabrik.de"
                    capacity: 15
                    attendees: 10
                    module:
                      id: 14
                      name: "Programmieren 2"
                    type: "Lecture"
                  - id: "3"
                    room: 
                      id: 34
                      roomNumber: "25"
                      location: "Ude"
                    day: "friday"
                    time_start:
                      hour: 14
                      minute: 15
                    time_end:
                      hour: 15
                      minute: 45
                    lecturer:
                      name: "Willi Wonka"
                      mail: "WilliWonka@schokoladenfabrik.de"
                    capacity: 29
                    attendees: 3
                    module:
                      id: 23
                      name: "AFS"
                    type: "Lecture"
                


                
  
  /trades:
    post:
      summary: Request Trade.
      operationId: "requestTrade"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TradeRequest"
      responses:
        '201':    # status code
          description: The new timetable
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Timetable"
        '400':
          description: Bad Request
    
  /modules/{moduleId}:
    get:
      parameters:
        - in: path
          name: moduleId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the module
      operationId: getModuleById
      responses:
        "200":
          description: single module
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Module"
  
  /trades/offers:
    post:
      summary: Create Trade Offer.
      operationId: "createTradeOffer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TradeRequest"
      responses:
        '201':    # status code
          description: The new trade offer
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/TradeOffer"
        '400':
          description: Bad Request


  /timeslots/{timeslotId}/module:
    get:
      operationId: getModuleByTimeslotId
      parameters:
        - in: path
          name: timeslotId
          schema:
            type: integer
            format: int64
          description: Numeric TimeslotId
          required: true
      responses:
        "200": 
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Module"

  # username  + password
  /login:
    post:
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        '200':
          description: Login Success
          content:
            application/json:
              schema:
                $ref : "#/components/schemas/User"

  #/logout



components:
  schemas:
    
    
    TradeRequest:
      properties:
        offeredTimeslotId:
          type: integer
          format: int64
          nullable: true
        wantedTimeslotId:
          type: integer
          format: int64
          nullable: true
        offeredByStudentMatriculationNumber:
          type: integer
          format: int64
        forced:
          type: boolean
        adminId:
          type: integer
          format: int64
          nullable: true

    Room:
      properties:
        id:
          type: integer
          format: int64
        roomNumber:
          type: string
        location:
          type: string 

    Lecturer:
      properties:
        name: 
          type: string
        mail:
          type: string

    DayEnum:
      type: string
      enum:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
    Timestamp:
      type: object
      properties:
        hour: 
          type: integer
          minimum: 0
          maximum: 23
        minute: 
          type: integer
          minimum: 0
          maximum: 59

    TimeslotType:
      type: string
      enum:
        - Lecture
        - Exercise
        - PracticalTraining

    TradeOffer:
      properties:
        offeredTimeslotId:
            type: integer
            format: int64
        wantedTimeslotId:
          type: integer
          format: int64
        id:
          type: integer
        instant:
          type: boolean
        collides:
          type: boolean

    LoginRequest:
      properties:
        username:
          type: string
        password:
          type: string
    
    LoginResponse:
      properties:
        token: 
          type: string

    User:
      properties:
        userId: 
          type: integer
          format: int64
        roles: 
          type: array
          items: 
            type: string
    
    Timetable:
      properties: 
        id:
          type: integer
          format: int64
        end:
          type: string
          format: date
        start:
          type: string
          format: date
        timeslots:
          type: array
          items:
            $ref: "#/components/schemas/Timeslot"
    
    Module:
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        #timeslots:
        #  type: array
        #  items:
        #    $ref: "#/components/schemas/Timeslot"
        
    PossibleTradesResponse:
      properties:
        instant:
          type: array
          items:
            $ref: "#/components/schemas/Timeslot"
        tradesAvailable:
          type: array
          items:
            $ref: "#/components/schemas/Timeslot"
        remaining:
          type: array
          items:
            $ref: "#/components/schemas/Timeslot"

    Timeslot:
      properties:
        id:
          type: integer
          format: int64
        room:
          $ref: "#/components/schemas/Room"
        day:
          $ref : "#/components/schemas/DayEnum"
        time_start:
          $ref : "#/components/schemas/Timestamp"
        time_end:
          $ref : "#/components/schemas/Timestamp"
        lecturer:
          $ref : "#/components/schemas/Lecturer"
        capacity:
          type: integer
        possibleTrades:
          type: array
          items:
            $ref : "#/components/schemas/TradeOffer"
        attendees:
          type: integer
        module:
          $ref: "#/components/schemas/Module"
        type:
          $ref: "#/components/schemas/TimeslotType"


    Student:
      properties:
        matriculationNumber:
          type: integer
          format: int64
        username:
          type: string
        timeslots:
          type: array
          items:
            $ref: "#/components/schemas/Timeslot"
    
        

