openapi: 3.0.0
info:
  title: Exchange Platform API
  version: 0.0.2
servers:
  - url: http://localhost:{port}/exchangeplatform/api/v1
    variables:
      port:
        enum:
          - '1717'
        default: '1717'


paths:
  /students/{studentId}:
    get:
      summary: Returns detailed information about the student specified by the Id.
      operationId: "getStudentById"
      parameters:
        - in: path
          name: studentId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the student to get
      responses:
        '200':    # status code
          description: A single student
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Student"
  
  /timeslots:
    get:
      summary: Returns a list of timeslots.
      operationId: "getAllTimeslots"
      responses:
        '200':    # status code
          description: A JSON array of timeslots
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: "#/components/schemas/Timeslot"

  /timeslots/{timeslotId}:
    get:
      summary: Get timeslot.
      operationId: "getTimeslotById"
      parameters:
        - in: path
          name: timeslotId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the timeslot
      responses:
        '200':    # status code
          description: A single timeslot
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Timeslot"

  /students/{studentId}/personalizedTimetable:
    get:
      summary: Get personalized Timetable of student.
      operationId: "getPersonalizedTimetable"
      parameters:
        - in: path
          name: studentId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the student
      responses:
        '200':    # status code
          description: a timetable
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: "#/components/schemas/Timetable"
  
  /trades:
    post:
      summary: Create trade offer.
      operationId: "createTradeOffer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TradeRequest"
      responses:
        '201':    # status code
          description: The created trade object
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/TradeOffer"
        '400':
          description: Bad Request
    
  /modules/{moduleId}:
    get:
      parameters:
        - in: path
          name: moduleId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the module
      operationId: getModuleById
      responses:
        "200":
          description: single module
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Module"
  
  /trades/{tradeId}/{studentId}/accept:
    post:
      summary: Accept trade offer.
      operationId: "acceptTradeOffer"
      parameters:
        - in: path
          name: tradeId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the trade
        - in: path
          name: studentId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the student
      responses:
        '201':    # status code
          description: The accepted trade object
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/TradeOffer"

  # username  + password
  /login:
    post:
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        '200':
          description: Login Success
          content:
            application/json:
              schema:
                $ref : "#/components/schemas/User"
    
components:
  schemas:
    
    
    TradeRequest:
      properties:
        offeredTimeslotId:
          type: integer
          format: int64
          nullable: true
        wantedTimeslotId:
          type: integer
          format: int64
          nullable: true
        offeredByStudentMatriculationNumber:
          type: integer
          format: int64
        forced:
          type: boolean
        adminId:
          type: integer
          format: int64
          nullable: true

    Room:
      properties:
        id:
          type: integer
          format: int64
        roomNumber:
          type: string
        location:
          type: string 

    Lecturer:
      properties:
        name: 
          type: string
        mail:
          type: string

    DayEnum:
      type: string
      enum:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
    Timestamp:
      type: object
      properties:
        hour: 
          type: integer
        minute: 
          type: integer

    TimeslotType:
      type: string
      enum:
        - Lecture
        - Exercise
        - PracticalTraining

    TradeOffer:
      properties:
        offeredTimeslotId:
            type: integer
            format: int64
        wantedTimeslotId:
          type: integer
          format: int64
        id:
          type: integer
        instant:
          type: boolean
        collides:
          type: boolean

    LoginRequest:
      properties:
        username:
          type: string
        password:
          type: string

    User:
      properties:
        userId: 
          type: integer
          format: int64
        roles: 
          type: array
          items: 
            type: string
    
    Timetable:
      properties: 
        id:
          type: integer
          format: int64
        end:
          type: string
        start:
          type: string
        timeslots:
          type: array
          items:
            $ref: "#/components/schemas/Timeslot"
    
    Module:
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        timeslots:
          type: array
          items:
            $ref: "#/components/schemas/Timeslot"
        

    Timeslot:
      properties:
        id:
          type: integer
          format: int64
        room:
          $ref: "#/components/schemas/Room"
        day:
          $ref : "#/components/schemas/DayEnum"
        time_start:
          $ref : "#/components/schemas/Timestamp"
        time_end:
          $ref : "#/components/schemas/Timestamp"
        lecturer:
          $ref : "#/components/schemas/Lecturer"
        capacity:
          type: integer
        possibleTrades:
          type: array
          items:
            $ref : "#/components/schemas/TradeOffer"
        attendees:
          type: integer

    Student:
      properties:
        matriculationNumber:
          type: integer
          format: int64
        username:
          type: string
        timeslots:
          type: array
          items:
            $ref: "#/components/schemas/Timeslot"
    
        

